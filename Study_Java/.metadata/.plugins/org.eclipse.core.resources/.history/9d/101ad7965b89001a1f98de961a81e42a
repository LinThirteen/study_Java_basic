
//1.进入my_test数据库
	>use my_test


//2.向数据库的users集合中插入一个文档	
	>db.users.insert({name:"哈哈",age:12,gender:"女"})
	>show dbs
	>show collections


//3.查询user集合中的文档
	>db.user.find()


//4.向数据库的user集合中插入一个文档		
	>db.users.insert({name:"呵呵",age:12,gender:"女"})


//5.查询数据库user集合中的文档
	>db.user.find()


//6.统计数据库user集合中的文档数量
	>db.user.find().count()


//7.查询数据库user集合中username为sunwukong的文档
	>db.user.find({username:"sunwukong"})
	
	
//8.向数据库user集合中的username为sunwukong的文档，添加一个address属性，属性值为huaguoshan
	>db.user.update({username:"sunwukong"},{$set:{address:"huaguoshan"}})



//9.使用{username:"tangseng"} 替换 username 为 zhubajie的文档
	>db.user.replace{username:"tangseng"},{username:"tangseng"})
	


//10.删除username为sunwukong的文档的address属性
	>db.user.update({username:"sunwukong"},{$unset:{address}})



//11.向username为sunwukong的文档中，添加一个hobby:{cities:["beijing","shanghai","shenzhen"] , movies:["sanguo","hero"]}
	>db.user.update({username:"sunwukong"},{$set:{hobby:{cities:["beijing","shanghai","shenzhen"] , movies:["sanguo","hero"]}}}


//12.向username为tangseng的文档中，添加一个hobby:{movies:["A Chinese Odyssey","King of comedy"]}
	>db.user.update({username:"tangseng"},{$set:{hobby:{movies:["A Chinese Odyssey","King of comedy"]}}}




//13.查询喜欢电影hero的文档  ------------------------查询内嵌文档必须使用引号-------------------
	>db.user.find({"hobby.movies":"hero"})





//14.向tangseng中添加一个新的电影Interstellar---------------------往列表里面添加(push)-----------------------
	方法一：
	>db.user.update({username:"tangseng"},{$push:{"hobby.movies":"Interstellar"}});
	方法二：（不重复的集合）
	>db.user.update({username:"tangseng"},{$addToSet:{"hobby.movies":"Interstellar"}});
	
	


//15.删除喜欢beijing的用户
	>db.user.remove({"hobby.city":"beijing"});



//16.删除user集合
	>db.user.remove({});
	>db.user.drop();

	

//17.向numbers中插入20000条数据
	方式一(效率低)
	for (var i+1;i<=2000;i++){
	db.numbers.insert({num:i});
	}
	
	方式二:
	var arr=[]
	for (var i+1;i<=2000;i++){
		arr.push({num:i});
	}
	db.numbers.insert(arr);



//18.查询numbers中num为500的文档
	>db.numbers.find({num:500})
	


//19.查询numbers中num大于5000的文档
	>db.numbers.find({num:{$gt:5000}})
	>db.numbers.find({num:{$gte:5000}})



//20.查询numbers中num小于30的文档
	>db.numbers.find({num:{$lt:30}})



//21.查询numbers中num大于40小于50的文档
	>db.numbers.find({num:{$gt:40,$lt:50}})



//22.查询numbers中num大于19996的文档
	>db.numbers.find({num:{$gt:19996}})



//23.查看numbers集合中的前10条数据
	>db.numbers.find({num:{$lt:10})
	>db.numbers.find().limit(10)


														mongo会自动调整执行顺序
//24.查看numbers集合中的第11条到20条数据 ------------------skip()用于跳过前十条-----------
	>db.numbers.find().skip(10).limit(10)
	>db.numbers.find().limit(10).skip(10)


//25.查看numbers集合中的第21条到30条数据
	>db.numbers.find().skip(20).limit(10)



//26.将dept和emp集合导入到数据库中
	>
	
	
//27.查询工资小于2000的员工
	>db.emp.find({sal:{$lt:2000}})



//28.查询工资在1000-2000之间的员工
	>db.emp.find({sal:{$lt:2000,$gt:1000}}).


//29.查询工资小于1000或大于2500的员工
	>db.emp.find({$or:[{$sal:{$lt:1000}},{sal:{$gt:2500}}]}),



//30.查询财务部的所有员工
	>var depno = db.dept.findOne({name:"财务部"}).deptno;
	>de.emp.find({depno:depno});
	


//31.查询销售部的所有员工
	>var depno = db.dept.findOne({name:"销售部"}).deptno;
	>de.emp.find({depno:depno});




//32.查询所有mgr为7698的所有员工
	>db.emp.find({mgr:7698});



//33.为所有薪资低于1000的员工增加工资400元
	>db.emp.updateMany();













































