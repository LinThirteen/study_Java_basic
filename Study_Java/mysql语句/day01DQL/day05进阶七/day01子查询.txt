进阶七：

//含义：
	出现在其他语句中的select语句，称为子查询或内查询
	外部的查询语句，称为主查询或外查询

分类：
	按子查询出现的位置
			select后面：
					仅仅支持标量子查询
			from 后面
					支持表子查询
			where 或 having后面     ***重点
					标量子查询（单行子查询）√
					列子查询 （多行子查询） √
					行子查询
			exists后面（相关子查询）
					表子查询
				
	按结果集的行列数不同：
		标量子查询（结果集只有一行一列）
		列子查询（结果集只有一列多行）
		行子查询（结果集有一行多列）
		表子查询（结果集一般为多行多列）
	
	

//--------------------子查询（where 或having后面）-----------------//
标量子查询（单行子查询）
列子查询 （多行子查询） 
行子查询（多列多行）

特点：
	①子查询放在小括号内
	②子查询一般放在条件的右侧
	③标量子查询，一般搭配着单行操作符使用（> <  >=  <=  = <>）
	
	列子查询：一般搭配多行操作符使用  IN,ANY/SOME,ALL

子查询的执行优先于主查询执行，主查询的条件用到的子查询的结果

//-----------------------------------------------------------------//




//---------------------标量子查询------------------------//

#案例一：谁的工资比Abel高
①查询Abel的工资
select salary from employees where last_name= Abel;

②查询员工的信息，满足salary>①结果
select * from  employees where salary 
> (select salary from employees where last_name= "Abel");



#案例二返回job_id与141员工相同，salary比143号员工多的员工 姓名，job_id和工资
①返回job_id与141员工相同
select * from employees where job_id = 
(select job_id from employees where employee_id=141);

②salary比143号员工多的员工 姓名，job_id和工资
select * from employees where salary >
(select salary from employees where employee_id=143)

③连接①+②
select last_name ,job_id,salary  from employees
where job_id = 
(select job_id from employees where employee_id=141)
and salary >
(select salary from employees where employee_id=143)



#案例三：查询最低工资大于50号部门最低工资的部门id和其最低工资
①50号部门最低工资
select min(salary) from employees where department_id=50;

②查询每个部门的最低工资
select min(salary),department_id from employees group by department_id; 

③筛选
select min(salary),department_id from employees group by department_id having min(salary) >
(select min(salary) from employees where department_id=50);

//-----------------------------------------------------------------//




//---------------------------非法使用标量子查询---------------------//

select min(salary),department_id from employees 
group by department_id having min(salary) >  
(select salary from employees where department_id=50);  //错误，因为子查询中只能使用标量自查出不可以min(salary)>多个结果


//-----------------------------------------------------------------//




//--------------------------列子查询（多行子查询）-------------------------//
1.返回多行
2.使用多行比较操作符
		操作符： 
			IN/NOT IN  :等同于任意一个    
			ANY/SOME   :和子查询返回的某一个值比较  <>any    <any   >any
			All        :和子查询返回的所有值比较      <>all   <all   >all




#案例一：返回location_id是1400或1700的部门中的所有员工姓名
#①查询location_id是1400或1700的部门编号(最好去一下重)
select distinct department_id
from department
where location_id in(1400,1700);

#②查询员工姓名，要求部门号是①列表中所有员工姓名
select last_name from employees where department_id in(select department_id
from departments
where location_id in(1400,1700));



#案例二：返回其它部门中比job_id为‘IT_PROG’部门任一工资都低的员工 的员工号、姓名、job_id 以及salary
#①job_id为‘IT_PROG’部门所有工资员工
select salary from employees where job_id="IT_PROG";

#②返回其它部门中比job_id为‘IT_PROG’部门所有工资都低的员工 的员工号、姓名、job_id 以及salary
select employee_id,last_name,job_id,salary from employees where salary < any(select salary from employees where job_id="IT_PROG");


#案例三：返回其它部门中比job_id为‘IT_PROG’部门全部工资都低的员工 的员工号、姓名、job_id 以及salary
select employee_id,last_name,job_id,salary from employees where salary < all(select salary from employees where job_id="IT_PROG");


#案例四：返回其他工种中比job_id为‘IT_PROG’工种任一工资都低的员工 的员工号、姓名、job_id 以及salary
select employee_id,last_name,job_id,salary from employees 
where salary < any(select salary from employees where job_id="IT_PROG")
and job_id<>"IT_PROG";

或
select employee_id,last_name,job_id,salary from employees 
where salary < (select max(salary) from employees where job_id="IT_PROG")
and job_id<>"IT_PROG";

//-----------------------------------------------------------------//





//--------------------------行子查询（结果集一行多列）--------------//


#案例：查询员工编号最小并且工资最高的员工信息
#①查询最小的员工编号
select min(employee_id) from employees


#②而查询工资最高
select max(salary) form employees

#③查询员工信息
select * from employees
where employee_id = (select min(employee_id) from employees) and salary= (select max(salary) form employees);


优化：
select * from employees where (employee_id,salary)=(select min(employee_id),max(salary) from employees);


//-----------------------------------------------------------------//





二：放在select后面
//--------------------------放在select后面------------------------//


#案例一：查询每个部门的员工个数
select d.*,(select count(*) from employees e 
where e.department_id = d.department_id) 个数 
from departments d;  (部门表中的部门id在员工表中找不到那么就会显示员工个数为0）;

错误：
select d.*,count(*) from departments d 
LEFT JOIN employees e on d.department_id = e.department_id 
GROUP BY d.department_id;(部门表中的部门id在员工表中找不到那么就会显示员工个数为1,其中1则为部门数）;



#案例二：查询员工号=102的部门名（只能看一行一列，去掉where后面的条件就会报错)
select (select department_name from departments d LEFT JOIN employees e on d.department_id=e.department_id where employee_id=102) 部门名;
或
select department_name from departments d LEFT JOIN employees e on d.department_id=e.department_id where employee_id=102;


//-----------------------------------------------------------------//



//-------------放在select后面(充当表使用，几行几列都行)------------//

#案例：查询每个部门的平均工资的工资等级
#①每个部门的平均工资
select avg(salary) ,department_id from employees group by  department_id;

#②工资等级
SELECT * from job_grades;

组合(将子查询充当一张表，要求必须起别名）
select ag_dep.*,g.grade_level
from ( select avg(salary) ag,department_id 
		from employees group by department_id
) ag_dep 
inner join job_grades g 
on ag_dep.ag between g.lowest_sal and g.highest_sal;


//-----------------------------------------------------------------//




四.exists后面（相关子查询）
//----------------------exists后面-------------------------------//

select exists(select * from employees);真则返回1 


#案例一：查询有员工的部门名(先主查询，在通过子查询过滤)
select department_name from departments where exists( select * from employees e where d.dapartment_id=e.dapartment_id);

使用in实现
select department_name from departments where department_id in(select department_id from employees); 



#案例二：查询没有女朋友的男神信息
select * from  boys WHERE not EXISTS(SELECT boyfriend_id FROM beauty);

//-----------------------------------------------------------------//




